{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dep-sync","text":"CI/CD Docs Package Meta <p>This is a helper library for synchronizing Python environments with dependencies.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install dep-sync\n</code></pre>"},{"location":"#license","title":"License","text":"<p><code>dep-sync</code> is distributed under the terms of the MIT license.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>Desktop readers can use special keyboard shortcuts:</p> Keys Action <ul><li>, (comma)</li><li>p</li></ul> Navigate to the \"previous\" page <ul><li>. (period)</li><li>n</li></ul> Navigate to the \"next\" page <ul><li>/</li><li>s</li></ul> Display the search modal"},{"location":"api/","title":"API","text":""},{"location":"api/#dep_sync.Dependency","title":"<code>Dependency</code>","text":"<p>A <code>packaging.requirements.Requirement</code> with support for editable metadata.</p> <p>Parameters:</p> Name Type Description Default <code>requirement_string</code> <code>str</code> <p>The requirement string.</p> required <code>editable</code> <code>bool</code> <p>Whether the dependency should be editable.</p> <code>False</code>"},{"location":"api/#dep_sync.Dependency.editable","title":"<code>editable = False if self.url is None else editable</code>  <code>instance-attribute</code>","text":""},{"location":"api/#dep_sync.Dependency.path","title":"<code>path: str | None</code>  <code>cached</code> <code>property</code>","text":"<p>Returns:</p> Type Description <code>str | None</code> <p>The path of the dependency if it's a local path, otherwise <code>None</code>.</p>"},{"location":"api/#dep_sync.dependencies_satisfied","title":"<code>dependencies_satisfied(dependencies: list[Dependency], *, sys_path: list[str] | None = None, environment: dict[str, str] | None = None) -&gt; bool</code>","text":"<p>This is equivalent to creating an instance of <code>InstalledDistributions</code> and calling its <code>dependencies_satisfied</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>dependencies</code> <code>list[Dependency]</code> <p>The dependencies to check.</p> required <code>sys_path</code> <code>list[str] | None</code> <p>The list of directories to search for installed distributions, defaulting to <code>sys.path</code>.</p> <code>None</code> <code>environment</code> <code>dict[str, str] | None</code> <p>The marker environment, defaulting to <code>packaging.markers.default_environment</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>Whether all the dependencies are satisfied.</p>"},{"location":"api/#dep_sync.dependency_state","title":"<code>dependency_state(dependencies: list[Dependency], *, exhaustive: bool = False, sys_path: list[str] | None = None, environment: dict[str, str] | None = None) -&gt; DependencyState</code>","text":"<p>This is equivalent to creating an instance of <code>InstalledDistributions</code> and calling its <code>dependency_state</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>dependencies</code> <code>list[Dependency]</code> <p>The dependencies to check.</p> required <code>exhaustive</code> <code>bool</code> <p>Whether to search for all distributions that are not required.</p> <code>False</code> <p>Returns:</p> Type Description <code>DependencyState</code> <p>An instance of <code>dep_sync.DependencyState</code>.</p>"},{"location":"api/#dep_sync.InstalledDistributions","title":"<code>InstalledDistributions</code>","text":"<p>Represents the installed distributions within a Python environment. This adds caching to the distribution discovery process for improved performance and should be used instead of the standalone functions when the state of the environment would not change between calls.</p> <p>Parameters:</p> Name Type Description Default <code>sys_path</code> <code>list[str] | None</code> <p>The list of directories to search for installed distributions, defaulting to <code>sys.path</code>.</p> <code>None</code> <code>environment</code> <code>dict[str, str] | None</code> <p>The marker environment, defaulting to <code>packaging.markers.default_environment</code>.</p> <code>None</code>"},{"location":"api/#dep_sync.InstalledDistributions.dependencies_satisfied","title":"<code>dependencies_satisfied(dependencies: list[Dependency]) -&gt; bool</code>","text":"<p>This should be preferred for simple checks as the discovery process halts when a dependency is not satisfied.</p> <p>Parameters:</p> Name Type Description Default <code>dependencies</code> <code>list[Dependency]</code> <p>The dependencies to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Whether all the dependencies are satisfied.</p>"},{"location":"api/#dep_sync.InstalledDistributions.dependency_state","title":"<code>dependency_state(dependencies: list[Dependency], *, exhaustive: bool = False) -&gt; DependencyState</code>","text":"<p>This should be preferred for more complex checks as it returns the state of all dependencies. If the <code>exhaustive</code> argument is <code>True</code>, the <code>not_required</code> attribute of the returned <code>dep_sync.DependencyState</code> will contain the names of all distributions found in the environment that were not requested. If not, the attribute will be empty.</p> <p>Parameters:</p> Name Type Description Default <code>dependencies</code> <code>list[Dependency]</code> <p>The dependencies to check.</p> required <code>exhaustive</code> <code>bool</code> <p>Whether to search for all distributions that are not required.</p> <code>False</code> <p>Returns:</p> Type Description <code>DependencyState</code> <p>An instance of <code>dep_sync.DependencyState</code>.</p>"},{"location":"api/#dep_sync.InstalledDistributions.get","title":"<code>get(project_name: str) -&gt; Distribution | None</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project.</p> required <p>Returns:</p> Type Description <code>Distribution | None</code> <p>The distribution for the given project name, or <code>None</code> if a distribution is not found.</p>"},{"location":"api/#dep_sync.DependencyState","title":"<code>DependencyState</code>","text":"<p>Represents the state of dependencies within a Python environment as returned by the <code>dep_sync.InstalledDistributions.dependency_state</code> method.</p>"},{"location":"api/#dep_sync.DependencyState.missing","title":"<code>missing = tuple(missing)</code>  <code>instance-attribute</code>","text":""},{"location":"api/#dep_sync.DependencyState.not_required","title":"<code>not_required = tuple(not_required)</code>  <code>instance-attribute</code>","text":""},{"location":"api/#dep_sync.DependencyState.satisfied","title":"<code>satisfied = tuple(satisfied)</code>  <code>instance-attribute</code>","text":""},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#010-2024-10-02","title":"0.1.0 - 2024-10-02","text":"<p>This is the initial public release.</p>"}]}